<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tech on Twilight Tornado</title><link>http://chiro.wang/categories/tech/</link><description>Recent content in tech on Twilight Tornado</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Wed, 09 Mar 2022 18:03:08 +0800</lastBuildDate><atom:link href="http://chiro.wang/categories/tech/index.xml" rel="self" type="application/rss+xml"/><item><title>从源码看 Go errors</title><link>http://chiro.wang/posts/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9C%8B-go-errors/</link><pubDate>Wed, 09 Mar 2022 18:03:08 +0800</pubDate><guid>http://chiro.wang/posts/%E4%BB%8E%E6%BA%90%E7%A0%81%E7%9C%8B-go-errors/</guid><description>go version: 1.15.7
TL;DR for usage only error 是一个 interface，只包含一个 method: Error() string，返回该 error 的信息 两种常用新建 error 的方法： errors.New() fmt.Errorf() wrap error：保留核心 error 信息，方便细粒度错误处理 wrap error 的方法： 自己实现一个包含 Unwrap() error 方法的结构 使用 fmt.Errorf() + %w 格式标记符 unwrap error：解出核心 error，透过封装看本质，进行更精细的错误处理 errors 包提供的两个函数： Is(err, target error) bool：判断 err 能否匹配 target As(err error, target interface{}) bool：如果 err 匹配 target，将匹配结果放入 target 注意：target 需要为指向 error 的指针 拓展：</description></item></channel></rss>